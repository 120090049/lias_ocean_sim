<?xml version="1.0"?>
<launch>
    <arg name="gui" default="true"/>
    <arg name="paused" default="false"/>
    <arg name="world_name" default="$(find uuv_dave)/worlds/uuv_dave_ocean_waves.world"/>
    <arg name="namespace" default="caracara"/>
    <arg name="velocity_control" default="true"/>
    <arg name="debug" default="false"/>
    <arg name="verbose" default="false"/>
    <arg name="x" default="4"/>
    <arg name="y" default="4"/>
    <arg name="z" default="-93"/>
    <arg name="roll" default="0"/>
    <arg name="pitch" default="0"/>
    <arg name="yaw" default="-1.8"/>
    
    <!-- use Gazebo's empty_world.launch with uuv_dave_ocean_waves.world -->
    <include file="$(find gazebo_ros)/launch/empty_world.launch">
        <arg name="world_name" value="$(arg world_name)"/>
        <arg name="paused" value="$(arg paused)"/>
        <arg name="use_sim_time" value="true"/>
        <arg name="gui" value="$(arg gui)"/>
        <arg name="headless" value="false"/>
        <arg name="debug" value="$(arg debug)"/>
        <arg name="verbose" value="$(arg verbose)"/>
    </include>


    <!-- use ned frame north east down -->
    <include file="$(find uuv_assistants)/launch/publish_world_ned_frame.launch"/>

    <!-- world models -->
    <node name="publish_world_models"
        pkg="uuv_assistants"
        type="publish_world_models.py"
        output="screen">
        <rosparam subst_value="true">
            meshes:
                heightmap:
                    mesh: package://uuv_gazebo_worlds/models/sand_heightmap/meshes/heightmap.dae
                    model: sand_heightmap
                seafloor:
                    plane: [2000, 2000, 0.1]
                    pose:
                        position: [0, 0, -100]
                north:
                    plane: [0.1, 2000, 100]
                    pose:
                        position: [1000, 0, -50]
                south:
                    plane: [0.1, 2000, 100]
                    pose:
                        position: [-1000, 0, -50]
                west:
                    plane: [2000, 0.1, 100]
                    pose:
                        position: [0, -1000, -50]
                east:
                    plane: [2000, 0.1, 100]
                    pose:
                        position: [0, 1000, -50]
        </rosparam>
    </node>

<!-- caracara_gazebo -->
    <arg name="world" default="sonar_tank.world"/>

    <arg name="standalone" default="true"/>
    <arg name="sonar_name" default="blueview_p900"/>

    <arg name="sonar_x" default="4"/>
    <arg name="sonar_y" default="4"/>
    <arg name="sonar_z" default="-90"/>
    <arg name="sonar_roll" default="0"/>
    <arg name="sonar_pitch" default="-0.1"/>
    <arg name="sonar_yaw" default="1.5708"/>

    <arg name="gpu_ray" default="false"/>

    <arg name="maxDistance" default="10"/>
    <arg name="raySkips" default="1"/>
    <arg name="sonar_scale" default="'1 1 1'"/>
    <arg name="sonar_image_topic" default="sonar_image"/>
    <arg name="sonar_image_raw_topic" default="sonar_image_raw"/>
    <arg name="ray_visual" default="true"/>

    <arg name="plotScaler" default="0"/>
    <arg name="sensorGain" default="0.04"/>
    <arg name="writeLog" default="false"/>
    <arg name="writeFrameInterval" default="5"/>

    <param name="/$(arg namespace)/robot_description"
            command="$(find xacro)/xacro '$(find caracara_gazebo)/urdf/robot.xacro'
		    debug:=$(arg debug)
		    namespace:=$(arg namespace)
		    inertial_reference_frame:=world
            standalone:=$(arg standalone) gpu_ray:=$(arg gpu_ray)
            name:=$(arg sonar_name) scale:=$(arg sonar_scale) 
            sonar_image_topic:=$(arg sonar_image_topic) sonar_image_raw_topic:=$(arg sonar_image_raw_topic)
            maxDistance:=$(arg maxDistance) raySkips:=$(arg raySkips) plotScaler:=$(arg plotScaler)
            sensorGain:=$(arg sensorGain) writeLog:=$(arg writeLog) writeFrameInterval:=$(arg writeFrameInterval)
            ray_visual:=$(arg ray_visual)"
            />
    


    <node name="spawn_$(arg sonar_name)" pkg="gazebo_ros" type="spawn_model"
            args="-param $(arg sonar_name) -urdf -x $(arg sonar_x) -y $(arg sonar_y) -z $(arg sonar_z)
                -R $(arg sonar_roll) -P $(arg sonar_pitch) -Y $(arg sonar_yaw) -model $(arg namespace) -param /$(arg namespace)/robot_description" />

    <!-- A joint state publisher plugin already is started with the model,
	 no need to use the default joint state publisher. -->
    <!-- Robot state publisher subscribes to the custom joint state publisher -->


</launch>
